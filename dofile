!main install
!require python3 tar xz sed grep
!def install
    ED='\033[0;31m'
    GREEN='\033[0;32m'
    NC='\033[0m' # No Color
    FILEREGFILE="$HOME/.config/mimeapps.list"
    MIMEDIR="$HOME/.local/share/mime/packages"
    echo "INFO: Verifying system"
    #Check program requirements
    set -e
    if ! command -v java &> /dev/null
    then
        echo "WARNING: You should probably have java if you want to set up a Minecraft server"
    fi

    #Set up folders
    if [ "$EUID" -ne 0 ]; then
        echo "WARNING: You are not running as root. Program will be installed locally."
        INSTALLDIR="$HOME/.local/bin"
        LIBDIR="$HOME/.local/lib/craftserversetup"
        ICONDIR="$HOME/.local/share/icons"
        SHORTCUTDIR="$HOME/.local/share/applications"
    else
        INSTALLDIR="/usr/bin"
        LIBDIR="/usr/lib/craftserversetup"
        ICONDIR="/usr/share/pixmaps"
        SHORTCUTDIR="/usr/share/applications"
    fi
    APPDATADIR="$HOME/.local/share/mcserver"
    ASSETSDIR="$APPDATADIR/assets"
    echo "INFO: Setting up"
    if [ ! -d "$APPDATADIR" ]; then
        mkdir -p "$APPDATADIR"
    fi
    if [ ! -d "$LIBDIR" ]; then
        mkdir -p "$LIBDIR"
    fi
    if [ ! -d "$INSTALLDIR" ]; then
        mkdir -p "$INSTALLDIR"
        if [[ ":$PATH:" == *":$HOME/.local/bin:"* ]]; then
            echo ""
        else
            echo "WARNING: Local bin directory is not on PATH"
        fi

    fi

    if [ ! -d $ASSETSDIR ]; then
        mkdir $ASSETSDIR
    fi
    echo "INFO: Installing (Stage 1)"
    cp -r doc/* $ASSETSDIR # Copy assets
    cp assets/defaulticon.png $ASSETSDIR
    cp LICENSE $ASSETSDIR

    if [ -d "dist" ]; then
        echo "WARNING: dist directory found. Deleting now."
        rm -rf dist # Clean dist directory
    fi
    echo "INFO: Shortening source file"
    mkdir dist
    #Copy code and add exec permissions
    cp src/craftserversetup.py dist/craftserversetup.py
    if [ "$1" = "nominify" ]; then
        echo INFO: Skipping script minification as you requested.
    else
        tar -xf lib/python_minifier.tar.xz -C scripts --warning=no-timestamp
        python3 scripts/minify.py dist/craftserversetup.py dist/craftserversetup.py.tmp
        rm -rf scripts/python_minifier
        mv dist/craftserversetup.py.tmp dist/craftserversetup.py
        
        
    fi
    chmod +x dist/craftserversetup.py
    mv dist/craftserversetup.py dist/craftserversetup
    cp dist/craftserversetup "$INSTALLDIR/craftserversetup"

    ln -sf "$INSTALLDIR/craftserversetup" "$INSTALLDIR/mcserver"
    ln -sf "$INSTALLDIR/craftserversetup" "$INSTALLDIR/crss"
    pushd lib >/dev/null
    echo "INFO: Installing libraries"
    #Copy prebuilt python library
    for file in *.xz
    do
        tar -xf $file -C $LIBDIR --warning=no-timestamp #Extract library to custom library path
    done
    cp *.py $LIBDIR #Copy remaining custom librariespa
    popd >/dev/null
    if [ ! -d $ICONDIR ]; then
        mkdir -p $ICONDIR
    fi
    if [ ! -d $SHORTCUTDIR ]; then
        mkdir -p $SHORTCUTDIR
    fi
    echo "INFO: Installing (Stage 3)"
    cp assets/mc.png $ICONDIR/craftserversetup.png
    cp assets/craftserversetup.desktop "${SHORTCUTDIR}/craftserversetup.desktop"
    sed -i "s@}@${ICONDIR}@g" "${SHORTCUTDIR}/craftserversetup.desktop"
    #Replace home path in shortcut file

    #Register mime type
    if [ ! -d $MIMEDIR ]; then
        mkdir -p $MIMEDIR
    fi
    if [ ! -f $MIMEDIR/craftserversetup.xml ]; then
        cp assets/mime.xml $MIMEDIR/craftserversetup.xml
    fi

    #Create file association
    if [ -f $FILEREGFILE ]; then
        if ! grep -q "minecraft-server" "$FILEREGFILE"; then
            echo "application/minecraft-server=craftserversetup.desktop" >> $FILEREGFILE
        fi
    fi

    cp doc/craftserversetup.epdoc $LIBDIR
    cp src/translations.toml $APPDATADIR
    rm -rf dist
    printf "${GREEN}CraftServerSetup installed successfully!${NC}\n"
!def uninstall
    #!/usr/bin/bash
    #This program will be fixed, eventually

    if [ "$EUID" -ne 0 ]; then
        echo "WARNING: You are not running as root. You are only uninstalling locally"
        INSTALLDIR="$HOME/.local/bin"
        LIBDIR="$HOME/.local/lib/craftserversetup"
        ICONDIR="$HOME/.local/share/icons"
        SHORTCUTDIR="$HOME/.local/share/applications"
    else
        INSTALLDIR="/usr/bin"
        LIBDIR="/usr/lib/craftserversetup"
        ICONDIR="/usr/share/pixmaps"
        SHORTCUTDIR="/usr/share/applications"
    fi

    rm "$INSTALLDIR/craftserversetup"
    rm "$INSTALLDIR/mcserver"
    rm "$INSTALLDIR/crss"

    rm -rf "$LIBDIR"
    rm $ICONDIR/craftserversetup.png
    rm $SHORTCUTDIR/craftserversetup.desktop
    echo "craftserversetup is deleted"
!def reset
    rm -rf ~/.local/share/mcserver
!def package:private
    echo " ===> DANGER! This is not meant to be used by normal users. If you are not a developer, expect a lot of errors"
    echo " ===> Portabilizing dofile"
    sbuild %package installer
    echo " ===> Creating standard package"
    rm -rf deb
    rm -rf *.xz *.amc dist *.log *.deb *.zst *.rpm >/dev/null
    tar --exclude='./analytics' --exclude='./assets/mc.ico' --exclude='./changelog' --exclude='./dofile' --exclude '*.iss' --exclude='./deb' --exclude='./dev' --exclude './output' -cJf craftserversetup.tar.xz ./*
    echo " ===> Creating Debian Package"
    #Create deb directories. Ignore if they don't exist
    rm craftserversetup.deb
    mkdir deb
    mkdir deb/DEBIAN
    mkdir deb/usr
    mkdir deb/usr/bin
    mkdir -p deb/usr/lib/craftserversetup/tempdeb
    mkdir -p deb/usr/share/applications
    mkdir -p deb/usr/share/pixmaps

    set -e
    #From now on, errors should halt build

    #Declare vars
    DEBBINFOLDER="deb/usr/bin"
    DEBLIBFOLDER="deb/usr/lib/craftserversetup"
    DEBTEMPFOLDER="$DEBLIBFOLDER/tempdeb"
    cp assets/control deb/DEBIAN
    #Move control

    mkdir dist
    #Copy code and add exec permissions
    #Shorten using minifier
    cp src/craftserversetup.py dist/craftserversetup.py

    tar -xf lib/python_minifier.tar.xz -C scripts
    python3 scripts/minify.py dist/craftserversetup.py dist/craftserversetup.py.tmp
    rm -rf scripts/python_minifier
    mv dist/craftserversetup.py.tmp dist/craftserversetup.py
    chmod +x dist/craftserversetup.py
    mv dist/craftserversetup.py deb/usr/bin/craftserversetup
    chmod +x deb/usr/bin/craftserversetup

    #Extract libraries

    pushd lib >/dev/null
    #Copy prebuilt python library
    for file in *.xz
    do
        tar -xf $file -C "../$DEBLIBFOLDER" #Extract library to custom library path
    done
    cp *.py "../$DEBLIBFOLDER" #Copy remaining custom librariespa
    popd >/dev/null

    #Move desktop and icon files
    cp assets/mc.png deb/usr/share/pixmaps/craftserversetup.png
    cp assets/craftserversetup.desktop deb/usr/share/applications
    sed -i "s@}@/usr/share/pixmaps@g" "deb/usr/share/applications/craftserversetup.desktop"

    touch $DEBLIBFOLDER/deb

    #Move MIME into temporary directory
    cp assets/mime.xml $DEBTEMPFOLDER
    cp assets/defaulticon.png $DEBTEMPFOLDER
    cp doc/* $DEBTEMPFOLDER
    cp LICENSE $DEBTEMPFOLDER
    cp src/translations.toml $DEBTEMPFOLDER

    #Copy postinstall
    cp scripts/debian/postinstall.sh deb/DEBIAN/postinst
    chmod +x deb/DEBIAN/postinst

    dpkg-deb --build deb craftserversetup.deb
    if [ -d output ]; then
        rm -rf output
    fi
    mkdir output
    cp src/linux_universal_installer.sh output
    mv craftserversetup.tar.xz output
    mv craftserversetup.deb output
    cp universalwindowsinstaller/bin/Debug/CraftServerSetup-Universal-Installer.exe.exe output/WindowsUniversalInstaller.exe
    !execute wbuild
!def run:private
    !execute install nominify
    crss -d
!def commit:private
    set -e
    git pull
    git add .
    read -p "Commit message: " message
    git commit -m "$message"
    git push --force
!def sumsize:private
    !execute install
    set -e
    mkdir -p ~/.local/bin/crsssum
    cp ~/.local/bin/crss ~/.local/bin/crsssum
    du -cs --exclude=~/.local/share/mcserver/temp --exclude=~/.local/share/mcserver/servers ~/.local/bin/crsssum ~/.local/lib/craftserversetup ~/.local/share/mcserver/assets 
    rm -rf ~/.local/bin/crsssum
!def wbuild:private
    #This script builds for windows
    #Before, you must install Python 3.12 and Inno Setup into wine
    set -e
    if ! command -v wine &> /dev/null
    then
        echo "ERROR: You must have wine installed to execute a Windows build."
        exit 1
    fi

    WINEDIR="$HOME/.wine/drive_c"
    ISSPATH="C:\\Program Files (x86)\\Inno Setup 6\\Compil32.exe"
    PIPPATH="$WINEDIR/python/Scripts/pip.exe"
    FDIR="$WINEDIR/python/crss"
    PYINSTALLER="$WINEDIR/python/Scripts/pyinstaller.exe"
    OUTPUTDIR="$PWD/output"

    echo "Installing Dependencies"
    wine $PIPPATH install --upgrade pyinstaller windows-curses cursesplus requests pyyaml
    #Install deps

    if [ -d $FDIR ]; then
        rm -rf $FDIR
    fi

    echo "Copying Files"
    mkdir -p $FDIR
    mkdir $FDIR/installer
    cp lib/*.py $FDIR
    cp src/*.py $FDIR
    cp assets/mc.ico $FDIR
    cp assets/*.bmp $FDIR
    cp src/translations.toml $FDIR
    cp assets/defaulticon.png $FDIR
    cp LICENSE $FDIR
    
    read -p "Write app version: " version

    cd src
    #PARANV="${version//./,}"
    PARANV="$(python3 version_fixer.py $version)"
    #echo "--> SAFE V IS $PARANV"
    #Replace x.y.z to x,y,z
    sed -i -e '10d' vf.txt;sed -i "10i\ \ \ \ filevers=($PARANV)," vf.txt
    sed -i -e '11d' vf.txt;sed -i "11i\ \ \ \ prodvers=($PARANV)," vf.txt
    sed -i -e '35d' vf.txt;sed -i "35i\ \ \ \ \ \ \ \ StringStruct(u'FileVersion', u'$version')," vf.txt
    sed -i -e '40d' vf.txt;sed -i "40i\ \ \ \ \ \ \ \ StringStruct(u'ProductVersion', u'$version')])" vf.txt
    #Parse version file
    

    #Parse ISS file
    sed -i -e '5d' crss-wine.iss
    sed -i "5i#define MyAppVersion \"$version\"" crss-wine.iss
    sed -i -e '42d' crss-wine.iss
    sed -i "42iOutputBaseFilename=CraftServerSetup-$version-installer" crss-wine.iss

    cd ..
    cp src/vf.txt $FDIR
    cp src/crss-wine.iss $FDIR

    echo "Compiling stage 1"
    pushd $FDIR
    wine $PYINSTALLER --icon=mc.ico --version-file=vf.txt -y craftserversetup.py
    echo "Waiting 5 seconds..."
    sleep 5

    echo "Compiling stage 2"
    wine "$ISSPATH" /cc C:\\python\\crss\\crss-wine.iss

    popd

    echo "Packaging and moving"
    cp $FDIR/installer/* $OUTPUTDIR
    pushd $FDIR/dist
    echo "PORTABLE" >startupflags.txt
    zip -9 -r $OUTPUTDIR/craftserversetup-portable.zip .

    echo "COMPLETED"